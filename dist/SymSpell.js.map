{"version":3,"sources":["SymSpell.ts"],"names":["MODES","DictionaryItem","DictionaryItem.constructor","DictionaryItem.clear","SuggestItem","SuggestItem.constructor","SymSpell","SymSpell.constructor","SymSpell.parseWords","SymSpell.createDictionaryEntry","SymSpell.createDictionary","SymSpell.addLowestDistance","SymSpell.edits","SymSpell.lookup","SymSpell.correct","SymSpell.damerauLevenshteinDistance"],"mappings":"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ACA,CAACA,CAACA,CAACA,CAACA,GAAGA,CAACA,CAACA,GAAGA,CAACA,CAACA;YAChBA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,GAAGA,CAACA,CAACA,GAAGA,GAAGA,CAACA;YAClBA,EAAEA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,GAAGA,CAACA,CAACA;QACpBA,CAACA;QAEDA,IAAIA,YAAYA,GAAWA,MAAMA,GAAGA,MAAMA,CAACA;QAE3CA,GAAGA,CAACA,CAACA,GAAGA,CAACA,CAACA,GAAGA,CAACA,EAAEA,CAACA,IAAIA,CAACA,EAAEA,CAACA,EAAEA,EAAEA,CAACA;YAC5BA,IAAIA,EAAEA,GAAUA,CAACA,CAACA;YAClBA,GAAGA,CAACA,CAACA,GAAGA,CAACA,CAACA,GAAGA,CAACA,EAAEA,CAACA,IAAIA,CAACA,EAAEA,CAACA,EAAEA,EAAEA,CAACA;gBAC5BA,IAAIA,EAAEA,GAAWA,EAAEA,CAACA,MAAMA,CAACA,CAACA,GAAGA,CAACA,CAACA,CAACA,CAACA;gBACnCA,IAAIA,EAAEA,GAAUA,EAAEA,CAACA;gBAEnBA,EAAEA,CAACA,CAACA,MAAMA,CAACA,CAACA,GAAGA,CAACA,CAACA,IAAIA,MAAMA,CAACA,CAACA,GAAGA,CAACA,CAACA,CAACA,CAACA,CAACA;oBACnCA,CAACA,CAACA,CAACA,GAAGA,CAACA,EAAEA,CAACA,GAAGA,CAACA,CAACA,GAAGA,CAACA,CAACA,CAACA,EAAEA,CAACA,CAACA,CAACA;oBAC1BA,EAAEA,GAAGA,CAACA,CAACA;gBACTA,CAACA;gBAACA,IAAIA,CAACA,CAACA;oBACNA,CAACA,CAACA,CAACA,GAAGA,CAACA,CAACA,CAACA,CAACA,GAAGA,CAACA,CAACA,GAAGA,IAAIA,CAACA,GAAGA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,EAAEA,IAAIA,CAACA,GAAGA,CAACA,CAACA,CAACA,CAACA,GAAGA,CAACA,CAACA,CAACA,CAACA,CAACA,EAAEA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,GAAGA,CAACA,CAACA,CAACA,CAACA,GAAGA,CAACA,CAACA;gBAC9EA,CAACA;gBAEDA,CAACA,CAACA,CAACA,GAAGA,CAACA,CAACA,CAACA,CAACA,GAAGA,CAACA,CAACA,GAAGA,IAAIA,CAACA,GAAGA,CAACA,CAACA,CAACA,CAACA,GAAGA,CAACA,CAACA,CAACA,CAACA,GAAGA,CAACA,CAACA,EAAEA,CAACA,CAACA,EAAEA,CAACA,CAACA,EAAEA,CAACA,GAAGA,CAACA,CAACA,GAAGA,EAAEA,GAAGA,CAACA,CAACA,GAAGA,CAACA,GAAGA,CAACA,CAACA,GAAGA,EAAEA,GAAGA,CAACA,CAACA,CAACA,CAACA;YAC3FA,CAACA;YAEDA,EAAEA,CAACA,MAAMA,CAACA,CAACA,GAAGA,CAACA,CAACA,CAACA,GAAGA,CAACA,CAACA;QACxBA,CAACA;QACDA,MAAMA,CAACA,CAACA,CAACA,CAACA,GAAGA,CAACA,CAACA,CAACA,CAACA,GAAGA,CAACA,CAACA,CAACA;IACzBA,CAACA;IAEHT,eAACA;AAADA,CApYA,AAoYCA,IAAA;AApYY,gBAAQ,WAoYpB,CAAA,CAAC,oBAAoB","file":"SymSpell.js","sourcesContent":["\nexport enum MODES { TOP, SMALLEST, ALL }\ndeclare var process;\n\nclass DictionaryItem {\n  suggestions: Array<number> = [];\n  count: number = 0;\n\n  clear(): void{\n    this.suggestions = [];\n    this.count = 0;\n  }\n\n}\n\nclass SuggestItem {\n  term: string = '';\n  distance: number = 0;\n  count: number = 0;\n}\n\nexport interface OptionsObj {\n  mode?: MODES,\n  verbose?: number,\n  editDistanceMax?: number\n  debug?: boolean\n}\n\nexport class SymSpell {\n\n\n\n  //Dictionary that contains both the original words and the deletes derived from them\n  dictionary: Object = {};\n\n  //List of unique words.\n  wordList: Array<string> = [];\n\n  //maximum dictionary term length\n  maxLength: number = 0;\n\n  options: OptionsObj = {\n    mode:MODES.TOP,\n    verbose: 2,\n    editDistanceMax: 2,\n    debug: true\n  };\n\n  constructor(options?: OptionsObj) {\n    if(options) {\n      for(let key in options){\n        this.options[key] = options[key];\n      }\n    }\n  }\n\n  parseWords(text: string): Array<any> {\n    return text.toLowerCase().match(/([\\w\\d_](-[\\w\\d_])?('(t|d|s|m|ll|re|ve))?)+/g);\n  }\n\n  createDictionaryEntry(key:string,language:string): boolean{\n    var result: boolean = false;\n    var value: DictionaryItem;\n\n    var dictKey:string = language + key;\n    var valueo: any = dictKey in this.dictionary ? this.dictionary[dictKey] : false;\n\n    if (valueo !== false) {\n      if(typeof valueo === 'number'){\n        var tmp: number = valueo;\n        value = new DictionaryItem();\n        value.suggestions.push(tmp);\n        this.dictionary[dictKey] = value;\n      } else {\n        value = valueo;\n      }\n\n      if (value.count < Number.MAX_VALUE) value.count++;\n\n    } else if (this.wordList.length < Number.MAX_VALUE) {\n      value = new DictionaryItem();\n      value.count++;\n      this.dictionary[dictKey] = value;\n      if (key.length > this.maxLength) this.maxLength = key.length;\n    }\n\n    if(value.count === 1){\n\n      var keyInt: number = this.wordList.length;\n      this.wordList.push(key);\n\n      result = true;\n\n      //returns object where key and value == each delete\n      var edits = this.edits(key, 0);\n\n      for(let delItem in edits) {\n        let delKey: string = language + delItem;\n        let value2: any = delKey in this.dictionary ? this.dictionary[delKey] : false;\n        if (value2 !== false) {\n          if (typeof value2 === 'number') {\n            let tmp: number = value2;\n            let di: DictionaryItem = new DictionaryItem();\n            di.suggestions.push(tmp);\n            this.dictionary[delKey] = di;\n\n            //if suggestions does not contain keyInt\n            if (di.suggestions.indexOf(keyInt) === -1) {\n              this.addLowestDistance(di, key, keyInt, delItem);\n            }\n            //if value2 does not contain keyInt\n          } else if (value2.suggestions.indexOf(value2.suggestions.indexOf(keyInt) === -1)) {\n            this.addLowestDistance(value2, key, keyInt, delItem);\n          }\n        }else{\n          this.dictionary[delKey] = keyInt;\n        }\n\n      }\n    }\n    return result;\n  } //end createDictionaryEntry\n\n  createDictionary(corpus: string, language: string): void {\n\n    var wordCount: number = 0;\n\n    if (this.options.debug) {\n      console.log('Creating dictionary...');\n      var tStart: number = Date.now();\n    }\n\n    var words = this.parseWords(corpus);\n    var self = this;\n    words.forEach(function(word) {\n      if(self.createDictionaryEntry(word, language)) {\n        wordCount++;\n      }\n    });\n\n    if (this.options.debug) {\n      var tEnd: number = Date.now();\n      var tDiff: number = tEnd - tStart;\n\n      console.log(`Dictionary: ${wordCount} words, ${Object.keys(this.dictionary).length} entries, edit distance=${this.options.editDistanceMax} in ${tDiff} ms`);\n      console.log('memory:', process.memoryUsage());\n    }\n  }\n\n  addLowestDistance(item: DictionaryItem, suggestion:string, suggestionInt:number, delItem:string): void{\n    //remove all existing suggestions of higher distance, if verbose<2\n    //index2word\n    if (\n      this.options.verbose < 2 &&\n      item.suggestions.length > 0 &&\n      this.wordList[item.suggestions[0]].length - delItem.length > suggestion.length - delItem.length\n    ) {\n      item.clear();\n    }\n    //do not add suggestion of higher distance than existing, if verbose<2\n    if (this.options.verbose == 2 ||\n      item.suggestions.length == 0 ||\n      this.wordList[item.suggestions[0]].length - delItem.length >= suggestion.length - delItem.length\n    ){\n      item.suggestions.push(suggestionInt);\n    }\n  }\n\n  //inexpensive and language independent: only deletes, no transposes + replaces + inserts\n  //replaces and inserts are expensive and language dependent (Chinese has 70,000 Unicode Han characters)\n  //C# returned HashSet<string>\n  //TS returns object with key and value == each delete\n  edits(word: string, editDistance: number, deletes?: Object) {\n    deletes = deletes || {};\n    editDistance++;\n    if(word.length > 1 ) {\n      for (let i = 0; i < word.length; i++) {\n        //emulate C#'s word.Remove(i, 1)\n        let delItem: string = word.substring(0, i) + word.substring(i + 1);\n\n        if (!(delItem in deletes)) {\n          deletes[delItem] = delItem;\n          if(editDistance < this.options.editDistanceMax) {\n            this.edits(delItem, editDistance, deletes);\n          }\n        }\n\n      }\n    }\n    return deletes;\n  }\n\n  lookup(input: string, language: string, editDistanceMax: number): Array<SuggestItem> {\n    if (input.length - editDistanceMax > this.maxLength) {\n      return [new SuggestItem()];\n    }\n\n    var candidates: Array<string> = [];\n    var obj1 = {};\n\n    var suggestions: Array<SuggestItem> = [];\n    var obj2 = {};\n\n    candidates.push(input);\n\n    while(candidates.length > 0) {\n      var candidate: string = candidates.shift();\n\n      //save some time\n      //early termination\n      //suggestion distance=candidate.distance... candidate.distance+editDistanceMax\n      //if canddate distance is already higher than suggestion distance, than there are no better suggestions to be expected\n      if (\n        this.options.verbose < 2 &&\n        suggestions.length > 0 &&\n        input.length - candidate.length > suggestions[0].distance\n      ){\n        break;\n        //goto sort\n      }\n\n      var dictKey: string = language + candidate;\n      var valueo: any = dictKey in this.dictionary ? this.dictionary[dictKey] : false;\n\n      if (valueo !== false) {\n        var value: DictionaryItem = new DictionaryItem();\n\n        if (typeof valueo === 'number') {\n          value.suggestions.push(valueo);\n        } else {\n          value = valueo;\n        }\n\n        //if count>0 then candidate entry is correct dictionary term, not only delete item\n        if (value.count > 0 && !(candidate in obj2)) {\n          obj2[candidate] = candidate;\n          var si: SuggestItem = new SuggestItem();\n          si.term = candidate;\n          si.count = value.count;\n          si.distance = input.length - candidate.length;\n          suggestions.push(si);\n          //early termination\n          if (\n            this.options.verbose < 2 &&\n            input.length - candidate.length == 0\n          ){\n            break;\n            //goto sort\n          }\n        }\n\n        //iterate through suggestions (to other correct dictionary items) of delete item and add them to suggestion list\n        var self = this;\n        value.suggestions.forEach(function(intItem){\n          var suggestion: string = self.wordList[intItem];\n          if (!(suggestion in obj2)) {\n            obj2[suggestion] = suggestion;\n            //True Damerau-Levenshtein Edit Distance: adjust distance, if both distances>0\n            //We allow simultaneous edits (deletes) of editDistanceMax on on both the dictionary and the input term.\n            //For replaces and adjacent transposes the resulting edit distance stays <= editDistanceMax.\n            //For inserts and deletes the resulting edit distance might exceed editDistanceMax.\n            //To prevent suggestions of a higher edit distance, we need to calculate the resulting edit distance, if there are simultaneous edits on both sides.\n            //Example: (bank==bnak and bank==bink, but bank!=kanb and bank!=xban and bank!=baxn for editDistanceMaxe=1)\n            //Two deletes on each side of a pair makes them all equal, but the first two pairs have edit distance=1, the others edit distance=2.\n            var distance: number = 0;\n            if(suggestion != input){\n              if(suggestion.length === candidate.length){\n                distance = input.length - candidate.length;\n              } else if (input.length === candidate.length){\n                distance = suggestion.length - candidate.length;\n              } else {\n                //common prefixes and suffixes are ignored, because this speeds up the Damerau-levenshtein-Distance calculation without changing it.\n                var ii:number = 0;\n                var jj:number = 0;\n                while (ii < suggestion.length && ii < input.length && suggestion[ii] == input[ii]) ii++;\n                while (jj < suggestion.length - ii && jj < input.length - ii && suggestion[suggestion.length - jj - 1] == input[input.length - jj - 1]) jj++;\n                if (ii > 0 || jj > 0) {\n                  //c# substring = substr in js\n                  distance = self.damerauLevenshteinDistance(suggestion.substr(ii, suggestion.length - ii - jj), input.substr(ii, input.length - ii - jj));\n                } else {\n                  distance = self.damerauLevenshteinDistance(suggestion, input);\n                }\n              }\n            }\n\n\n            //save some time.\n            //remove all existing suggestions of higher distance, if verbose<2\n            if (self.options.verbose < 2 && suggestions.length > 0 && suggestions[0].distance > distance) {\n              suggestions = [];\n            }\n            //do not process higher distances than those already found, if verbose<2\n            if (self.options.verbose < 2 && suggestions.length > 0 && distance > suggestions[0].distance) {\n              return;\n              //continue; for forEach\n            }\n\n            if (distance <= editDistanceMax) {\n              var dictKey2 = language + suggestion;\n              var value2: any = dictKey2 in self.dictionary ? self.dictionary[dictKey2] : false;\n              if (value2 !== false) {\n                var si: SuggestItem = new SuggestItem();\n                si.term = suggestion;\n                si.count = value2.count;\n                si.distance = distance;\n                suggestions.push(si);\n              }\n            }\n\n          }\n        }); //end forEach\n      } //end if -- valueo\n\n      //add edits\n      //derive edits (deletes) from candidate (input) and add them to candidates list\n      //this is a recursive process until the maximum edit distance has been reached\n      if (input.length - candidate.length < editDistanceMax) {\n        //save some time\n        //do not create edits with edit distance smaller than suggestions already found\n        if (this.options.verbose < 2 && suggestions.length > 0 && input.length - candidate.length >= suggestions[0].distance){\n          continue;\n        }\n\n        for (var i = 0; i < candidate.length; i++) {\n          //emulate C#'s word.Remove(i, 1)\n          let delItem: string = candidate.substring(0, i) + candidate.substring(i + 1);\n          // var delItem: string = candidate.Remove(i, 1);\n          if (!(delItem in obj1)){\n            obj1[delItem] = delItem;\n            candidates.push(delItem);\n          }\n        }\n      }\n\n    } //end while\n\n    //sort by ascending edit distance, then by descending word frequency\n    //sort:\n    if (this.options.verbose < 2){\n      suggestions = suggestions.sort(function(x, y) {\n        //-x.count.CompareTo(y.count)\n        return y.count - x.count;\n      });\n    }else{\n      suggestions = suggestions.sort(function(x, y) {\n        // 2 * x.distance.CompareTo(y.distance) - x.count.CompareTo(y.count)\n        return 2 * (x.distance - y.distance) - (x.count - y.count)\n      });\n    }\n\n    if (this.options.verbose == 0 && suggestions.length > 1) {\n      //C#: GetRange\n      return suggestions.slice(0, 1);\n    } else{\n      return suggestions;\n    }\n  }\n\n  correct(input: string, language: string): Array<SuggestItem> {\n    var suggestions: Array<SuggestItem> = [];\n    //check in dictionary for existence and frequency; sort by ascending edit distance, then by descending word frequency\n    suggestions = this.lookup(input, language, this.options.editDistanceMax);\n    return suggestions;\n  }\n\n\n  // Damerau--Levenshtein distance algorithm and code\n  // from http://en.wikipedia.org/wiki/Damerau%E2%80%93Levenshtein_distance (as retrieved in June 2012)\n  damerauLevenshteinDistance(source: string, target: string): number{\n    var m: number = source.length;\n    var n: number = target.length;\n    //new Int32[m + 2, n + 2];\n    var H: Array<Array<number>> = [];\n    var sd = {};\n\n    var INF:number = m + n;\n\n    H[0] = [];\n    H[0][0] = INF;\n\n    //init structures\n    for (var i = 0; i <= m; i++) {\n      if (!H[i + 1]) H[i + 1] = [];\n      H[i + 1][1] = i;\n      H[i + 1][0] = INF;\n      sd[source[i]] = 0;\n    }\n    for (var j = 0; j <= n; j++) {\n      H[1][j + 1] = j;\n      H[0][j + 1] = INF;\n      sd[target[j]] = 0;\n    }\n\n    var concatString: string = source + target;\n\n    for (var i = 1; i <= m; i++) {\n      var DB:number = 0;\n      for (var j = 1; j <= n; j++) {\n        var i1: number = sd[target[j - 1]];\n        var j1:number = DB;\n\n        if (source[i - 1] == target[j - 1]) {\n          H[i + 1, j + 1] = H[i, j];\n          DB = j;\n        } else {\n          H[i + 1][j + 1] = Math.min(H[i][j], Math.min(H[i + 1][j], H[i][j + 1])) + 1;\n        }\n\n        H[i + 1][j + 1] = Math.min(H[i + 1][j + 1], H[i1][j1] + (i - i1 - 1) + 1 + (j - j1 - 1));\n      }\n\n      sd[source[i - 1]] = i;\n    }\n    return H[m + 1][n + 1];\n  }\n\n} //end SymSpell class\n"],"sourceRoot":"/source/"}